// SPI slave implementation 
// Here only 8 data bits are communicated
// sclk signal is generated by master and is different from system clk

`timescale 1ns/1ps
module spi_s (miso,dout,ready,sclk,mosi,done,din,cpha,cpol,rst);
  
  output logic done,miso;
  output logic [7:0] dout;
  input logic mosi,clk,rst,cpha,cpol,sclk,ready;
  input logic [7:0] din;
 
  logic [2:0] dbits_cnt,dbits_cnt_nxt; //counter to calculate number of data bits transmitted
  logic [7:0] data_in, din_nxt; // flop for storing data that is serially available on mosi
  logic [7:0] dout_reg,dout_nxt; // flop for storing data to be serially transferred on miso
 

  parameter DBITS = 8; //total number of data bits to be communicated
  
  typedef enum logic [1:0] {idle = 2'd0,cpha_delay = 2'd1,drive = 2'd2,sample = 2'd3} state;
  state pr_state,nx_state;

  always @(posedge sclk or negedge sclk or negedge rst) begin
    if (!rst) begin
      dbits_cnt <= '0;
      data_in   <= '0;
      dout_reg  <= '0;
    end
    else begin
      dbits_cnt <= dbits_cnt_nxt;
      data_in   <= din_nxt;
      dout_reg  <= dout_nxt;
    end
  end
  
  always @(posedge sclk or negedge sclk or negedge rst) begin
    if (!rst) pr_state <= idle;
    else pr_state <= nx_state;
  end   
  
  always @(*) begin
      nx_state      = pr_state; //default values
      dbits_cnt_nxt = dbits_cnt;
      din_nxt       = data_in;
      dout_nxt      = dout_reg;
      done          = '0; // assert done at the end for one cycle
          
    case (pr_state) 
      idle      : begin 
                   if (ready == '0) begin
                     if (cpha) begin
                        nx_state   =  cpha_delay; 
                     end
                     else begin
                       if (!cpol) nx_state   =  drive;
                       else      nx_state   =  sample;
                     end
                     dout_nxt   = din;
                   end
                 end
      
      cpha_delay : begin 
                       if (!cpol) nx_state   =  drive;
                       else      nx_state    =  sample;
                   end
      
      drive      : begin // in next sclk cycle, capture mosi input into data_in reg
                       din_nxt  = {data_in[6:0],mosi};
                       nx_state = sample;
                   end
        
      sample     : begin // in next sclk cycle, deliver miso output from dout reg, repeat till all DBITS are sent/captured
                       if (dbits_cnt == DBITS - 1) begin
                         nx_state = idle;
                         done     = '1;
                         dbits_cnt_nxt = '0;
                       end
                       else begin
                         dbits_cnt_nxt = dbits_cnt + 3'd1;
                         dout_nxt = {dout_reg[6:0],1'b0};
                         nx_state = drive;
                       end
                   end
     endcase
  end
 
  
  assign dout = (done) ? data_in : '0; // drive input reg contents at the end, should equal to 8 mosi bits received serially
  assign miso = dout_reg[7]; // drive miso output pin
  
endmodule
 
